---
import Layout from "../layouts/Layout.astro";
import { resolveComponent } from "../utils/component-resolver";
import { getPageData } from "../utils/dev-data-fetcher";
import "../styles/global.css";
import { CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { LoadingCarousel } from "@/components/LoadingCarousel";

const page = await getPageData("/");

if (!page) {
    throw new Error(
        "Root page not found. Make sure a page with slug '/' exists in pages.json",
    );
}

const resolvedComponents = await Promise.all(
    page.components.map(async (component) => {
        const Component = await resolveComponent(component.componentName);
        return {
            Component,
            props: component.formData,
            instanceId: component.instanceId,
            componentName: component.componentName,
        };
    }),
);
---

<Layout title={page.title}>
    <div>
        {
            resolvedComponents.map(
                ({ Component, props, instanceId, componentName }) => {
                    if (!Component) {
                        return (
                            <div
                                class="component-error"
                                data-instance-id={instanceId}
                                style="display: none;"
                            >
                                <p>Component '{componentName}' not found.</p>
                            </div>
                        );
                    }

                    return (
                        <Component data-instance-id={instanceId} {...props} />
                    );
                },
            )
        }

        <div class="space-y-8 p-4 w-full">
            <div class="w-full">
                <CardContent>
                    <LoadingCarousel client:load />
                </CardContent>
            </div>

            {
                page.content && !resolvedComponents.length && (
                    <div class="fallback-content">
                        <p>{page.content}</p>
                    </div>
                )
            }
        </div>
    </div>

    <style>
        .component-error {
            background-color: #fee;
            border: 1px solid #fcc;
            padding: 1rem;
            border-radius: 4px;
            margin: 1rem 0;
        }

        .component-error p {
            margin: 0;
            color: #c00;
        }

        .fallback-content {
            text-align: center;
            color: #666;
            font-style: italic;
        }
    </style>
</Layout>
